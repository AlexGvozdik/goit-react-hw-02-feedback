{"version":3,"sources":["components/Section/Section.styled.jsx","components/Section/Section.jsx","components/Notification/Notification.jsx","components/FeedBackOpt/FeedBackOpt.styled.jsx","components/FeedBackOpt/FeedBackOpt.jsx","components/Statistics/Statistics.styled.jsx","components/Statistics/Statistics.jsx","App.js","reportWebVitals.js","index.js"],"names":["MySection","styled","section","Section","title","children","className","Notification","notice","MyBtn","button","FeedBackOpt","onLeaveFeedback","btnNames","reset","map","btn","type","name","onClick","MyStatistics","div","Statistics","good","neutral","bad","total","positive","initialState","App","state","onHandleClick","e","target","console","log","setState","prev","totalAmount","positivePercentage","Math","round","onReset","arrFeedback","Object","keys","this","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kTACaA,EAAYC,IAAOC,QAAV,+H,OCePC,EAdC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,eAACL,EAAD,WACE,oBAAIM,UAAU,QAAd,SAAuBF,IACtBC,MCCQE,EANM,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACnB,OACI,4BAAIA,KCFCC,EAAQR,IAAOS,OAAV,wVCyBHC,EAvBK,SAAC,GAAsC,IAArCC,EAAoC,EAApCA,gBAAgBC,EAAoB,EAApBA,SAASC,EAAW,EAAXA,MAC3C,OACI,qCACKD,EAASE,KAAI,SAAAC,GAAG,OACb,cAACP,EAAD,CAEIQ,KAAK,SACLC,KAAMF,EACNG,QAASP,EAJb,SAMKI,GALIA,MAQb,cAACP,EAAD,CAAOU,QAASL,EAAhB,uBCfCM,EAAenB,IAAOoB,IAAV,iLCaVC,EAZI,SAAC,GAAyC,IAAxCC,EAAuC,EAAvCA,KAAKC,EAAkC,EAAlCA,QAASC,EAAyB,EAAzBA,IAAKC,EAAoB,EAApBA,MAAMC,EAAc,EAAdA,SAC1C,OACI,eAACP,EAAD,WACI,0CAAcG,EAAd,OACA,6CAAiBC,EAAjB,OACA,yCAAaC,EAAb,OACA,2CAAeC,EAAf,OACA,8CAAkBC,EAAlB,YCHNC,EAAe,CACjBL,KAAM,EACRC,QAAS,EACTC,IAAK,GAEcI,E,4MACnBC,MAAQ,CACRP,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGLM,cAAgB,SAACC,GACf,IAAMd,EAAOc,EAAEC,OAAOf,KACtBgB,QAAQC,IAAIjB,GACZ,EAAKkB,UAAS,SAACC,GAAD,mBAAC,eACVA,GADS,kBAEXnB,EAAM,EAAKY,MAAMZ,GAAM,Q,EAI5BoB,YAAc,WACZ,MAA+B,EAAKR,MACpC,OADA,EAAQP,KAAR,EAAcC,QAAd,EAAuBC,K,EAIvBc,mBAAqB,WACrB,IAAQhB,EAAS,EAAKO,MAAdP,KACR,OAAOiB,KAAKC,MAAOlB,EAAO,EAAKe,cAAiB,M,EAGlDI,QAAU,SAACV,GACT,EAAKI,SAAL,eAAkBR,K,4CAGpB,WACE,IAAMe,EAAcC,OAAOC,KAAKC,KAAKhB,OACrC,EAA+BgB,KAAKhB,MAA5BP,EAAR,EAAQA,KAAMC,EAAd,EAAcA,QAASC,EAAvB,EAAuBA,IAGvB,OADAS,QAAQC,IAAR,cAA2BQ,GAEzB,qCACE,cAAC,EAAD,CAASvC,MAAM,wBAAf,SACE,cAAC,EAAD,CAAaQ,gBAAiBkC,KAAKf,cAAelB,SAAU8B,EAAa7B,MAAOgC,KAAKJ,YAEvF,cAAC,EAAD,CAAStC,MAAM,aAAf,SACG0C,KAAKR,cAAiB,cAAC,EAAD,CAAYf,KAAMA,EAAMC,QAASA,EAASC,IAAKA,EAAKC,MAAOoB,KAAKR,cAAeX,SAAUmB,KAAKP,uBAChH,cAAC,EAAD,CAAc/B,OAAO,+B,GA1CHuC,aCClBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.bb76cfb2.chunk.js","sourcesContent":["import styled from '@emotion/styled'\r\nexport const MySection = styled.section`\r\n  padding: 20px;\r\n  .title {\r\n  font-size: 22px;\r\n  line-height: 1.14;\r\n  margin-bottom: 20px;\r\n}\r\n`","import PropTypes from 'prop-types';\r\nimport { MySection } from './Section.styled';\r\nconst Section = ({ title, children }) => {\r\n  return (\r\n    <MySection>\r\n      <h2 className=\"title\">{title}</h2>\r\n      {children}\r\n    </MySection>\r\n  );\r\n};\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  children: PropTypes.node,\r\n};\r\n\r\nexport default Section;","import React from 'react';\r\nconst Notification = ({notice}) => {\r\n    return (\r\n        <p>{notice}</p>\r\n    );\r\n}\r\n\r\nexport default Notification;","import styled from '@emotion/styled'\r\nexport const MyBtn = styled.button`\r\n  text-align: center;\r\n  color: dimgrey;\r\n  padding: 2px 5px;\r\n  background-color: snow;\r\n  border: 1px solid #858585;\r\n  border-radius: 3px;\r\n  box-shadow: 1px 2px 3px rgba(0, 0, 0, 0.4);\r\n  &:not(:last-child) {\r\n    margin-right: 10px;\r\n  }\r\n  &:hover {\r\n    background-color: dodgerblue;\r\n    color: black;\r\n  }\r\n`","import React from 'react';\r\nimport PropTypes from 'prop-types'\r\nimport {MyBtn} from './FeedBackOpt.styled'\r\nconst FeedBackOpt = ({onLeaveFeedback,btnNames,reset}) => {\r\n    return (\r\n        <>\r\n            {btnNames.map(btn => (\r\n                <MyBtn\r\n                    key={btn}\r\n                    type=\"button\"\r\n                    name={btn}\r\n                    onClick={onLeaveFeedback}\r\n                >\r\n                    {btn}\r\n                </MyBtn>\r\n            ))}\r\n            <MyBtn onClick={reset}>Reset</MyBtn>\r\n        </>\r\n    );\r\n}\r\n\r\nFeedBackOpt.propTypes = {\r\n    onLeaveFeedback: PropTypes.func.isRequired,\r\n    btnNames:PropTypes.array.isRequired,\r\n}\r\n\r\nexport default FeedBackOpt;","import styled from '@emotion/styled'\r\nexport const MyStatistics = styled.div`\r\n    span{\r\n        font-family: \"Roboto\", \"sans-serif\";\r\n  font-size: 18px;\r\n  line-height: 1.14;\r\n  color: dimgrey;\r\n  margin-bottom: 10px;\r\n    }\r\n`","import React from 'react';\r\nimport { MyStatistics } from './Statistics.styled';\r\nconst Statistics = ({good,neutral, bad, total,positive}) => {\r\n    return (\r\n        <MyStatistics>\r\n            <span>Good: { good} </span>\r\n            <span>Neutral: { neutral} </span>\r\n            <span>Bad: { bad} </span>\r\n            <span>Total: { total} </span>\r\n            <span>Positive: { positive} %</span>\r\n        </MyStatistics>\r\n    );\r\n}\r\n\r\nexport default Statistics;","import './App.css';\r\nimport React, { Component } from 'react'\r\nimport Section from './components/Section/Section.jsx';\r\nimport Notification from './components/Notification/Notification';\r\nimport FeedBackOpt from './components/FeedBackOpt/FeedBackOpt';\r\nimport Statistics from './components/Statistics/Statistics';\r\nconst initialState = {\r\n    good: 0,\r\n  neutral: 0,\r\n  bad: 0\r\n}\r\nexport default class App extends Component {\r\n  state = {\r\n  good: 0,\r\n  neutral: 0,\r\n  bad: 0\r\n  }\r\n  \r\n  onHandleClick = (e) => {\r\n    const name = e.target.name\r\n    console.log(name)\r\n    this.setState((prev) => ({\r\n      ...prev,\r\n      [name]:this.state[name]+1,\r\n    }))\r\n  }\r\n\r\n  totalAmount = () => {\r\n    const { good, neutral, bad } = this.state;\r\n    return good + neutral + bad;\r\n  }\r\n\r\n    positivePercentage = () => {\r\n    const { good } = this.state;\r\n    return Math.round((good / this.totalAmount()) * 100);\r\n    };\r\n  \r\n  onReset = (e) => {\r\n    this.setState({...initialState})\r\n  }\r\n\r\n  render() {\r\n    const arrFeedback = Object.keys(this.state)\r\n    const { good, neutral, bad } = this.state;\r\n\r\n    console.log(`arrFeedback`, arrFeedback)\r\n    return (\r\n      <>\r\n        <Section title='Please leave feedback'>\r\n          <FeedBackOpt onLeaveFeedback={this.onHandleClick} btnNames={arrFeedback} reset={this.onReset}/>\r\n        </Section>\r\n        <Section title='Statistics'>\r\n          {this.totalAmount() ? (<Statistics good={good} neutral={neutral} bad={bad} total={this.totalAmount()} positive={this.positivePercentage()}/>)\r\n            : (<Notification notice='No feedback given' />\r\n)}\r\n        </Section>\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}